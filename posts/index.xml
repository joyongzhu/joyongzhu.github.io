<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Yong&#39;s Blog</title>
    <link>https://joyongzhu.github.io/posts/</link>
    <description>Recent content in Posts on Yong&#39;s Blog</description>
    <image>
      <title>Yong&#39;s Blog</title>
      <url>https://joyongzhu.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://joyongzhu.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>zy.de@outlook.com (Yong)</managingEditor>
    <webMaster>zy.de@outlook.com (Yong)</webMaster>
    <lastBuildDate>Tue, 14 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://joyongzhu.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust 解决所有权问题的几种方法</title>
      <link>https://joyongzhu.github.io/posts/rust/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <author>zy.de@outlook.com (Yong)</author>
      <guid>https://joyongzhu.github.io/posts/rust/</guid>
      <description>什么是所有权 所有权是 Rust 中最重要的特性之一, 那么什么是所有权呢?
在一些开发语言如 Python 中，有 GC (垃圾回收机制)，这是语言本身提供的内存管理机制，而另一些语言如 C、C++ 则依赖开发人员手动管理内存。具有 GC 的语言大多存在性能问题，而依赖开发者手动管理内存的语言编写的程序往存在难以发现的内存问题，Rust 则使用了一种全新的思路：将内存管理的重担交给编译器，而所有权就是编译器用来管理内存的工具之一。
通俗地，便于理解地解释所有权：你租的房子，房东具有所有权，而你只有使用权，无论你如何折腾，都不能改变该房子的归属。
先来简单看个例子：
fn test_fn(arg: i32) { println!(&amp;#34;in:{}&amp;#34;, arg); } fn main() { let i = 32; test_fn(i); println!(&amp;#34;out:{}&amp;#34;, i); } 运行结果：
in:32 out:32 这么看是不是很正常，一个变量在传入函数之后仍然可以使用，这也符合我们在使用其他编程语言时的操作习惯。
再看下面的例子：
#[derive(Debug)] struct User { // 自定义一个结构体 name: String, age: i32, } fn print_user(arg: User) { println!(&amp;#34;in:{:?}&amp;#34;, arg); } fn main() { let user1 = User {name: String::from(&amp;#34;zzz&amp;#34;), age: 12}; print_user(user1); println!</description>
    </item>
    
    <item>
      <title>Hugo仓库设置与推送</title>
      <link>https://joyongzhu.github.io/posts/hugo%E4%BB%93%E5%BA%93%E8%AE%BE%E7%BD%AE%E4%B8%8E%E6%8E%A8%E9%80%811/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      <author>zy.de@outlook.com (Yong)</author>
      <guid>https://joyongzhu.github.io/posts/hugo%E4%BB%93%E5%BA%93%E8%AE%BE%E7%BD%AE%E4%B8%8E%E6%8E%A8%E9%80%811/</guid>
      <description>背景：
我在使用 hugo + github page 来构建我的博客，最近新换了一台电脑，打算把旧电脑上的 Hugo project 迁移过来，就是那个使用 hugo new site 生成的目录。废了一番劲终于找到了，是的我已经有一段时间没有更新我的博客了。
由此我开始思考如何合理保存我的整个 blog 项目， 因为只放在本地磁盘上 会忘记存放位置、磁盘损坏 和文件丢失的风险。作为程序员，我很自然地就想到 了 git，于是便有了这篇文章。
先看看我的整体目录结构： HugoProj 是最外层的仓库，其下有一个 website 目录，website 就是前面提到的使用 hugo new site 生成的 Hugo 项目。website 中不是浏览者能直接看到的网页内容，而是你的文章、站点配置等，Hugo 根据它们来生成最终在浏览器上展现的文件，所以你的 HugoProj 仓库可以是 private。
website 内的目录结构想必你很熟悉，你可以参考 Hugo 中文文档 尝试去创建一个 Hugo 项目。
接下来需要重点说明的是，在 website 内使用 hugo 或者 hugo -D 生成的网页文件，默认是在public目录中，但是我喜欢干净整洁，于是我在public目录下创建了一个xxx.github.io目录（xxx是你自己的github用户名）, 使用以下命令更改Hugo的生成路径：
hugo -d public/xxx.github.io xxx.github.io 目录你可以使用 git init 然后 push 上去，也可以在 Github 网页上创建然后 clone 下来，建议使用 git submodule add xxx.</description>
    </item>
    
  </channel>
</rss>
