<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rust on Yong&#39;s Blog</title>
    <link>https://zyede.github.io/tags/rust/</link>
    <description>Recent content in Rust on Yong&#39;s Blog</description>
    <image>
      <title>Yong&#39;s Blog</title>
      <url>https://zyede.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://zyede.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>zy.de@outlook.com (Yong)</managingEditor>
    <webMaster>zy.de@outlook.com (Yong)</webMaster>
    <lastBuildDate>Tue, 14 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://zyede.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust 解决所有权问题的几种方法</title>
      <link>https://zyede.github.io/posts/rust/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <author>zy.de@outlook.com (Yong)</author>
      <guid>https://zyede.github.io/posts/rust/</guid>
      <description>什么是所有权 所有权是 Rust 中最重要的特性之一, 那么什么是所有权呢?
在一些开发语言如 Python 中，有 GC (垃圾回收机制)，这是语言本身提供的内存管理机制，而另一些语言如 C、C++ 则依赖开发人员手动管理内存。具有 GC 的语言大多存在性能问题，而依赖开发者手动管理内存的语言编写的程序往存在难以发现的内存问题，Rust 则使用了一种全新的思路：将内存管理的重担交给编译器，而所有权就是编译器用来管理内存的工具之一。
通俗地，便于理解地解释所有权：你租的房子，房东具有所有权，而你只有使用权，无论你如何折腾，都不能改变该房子的归属。
先来简单看个例子：
fn test_fn(arg: i32) { println!(&amp;#34;in:{}&amp;#34;, arg); } fn main() { let i = 32; test_fn(i); println!(&amp;#34;out:{}&amp;#34;, i); } 运行结果：
in:32 out:32 这么看是不是很正常，一个变量在传入函数之后仍然可以使用，这也符合我们在使用其他编程语言时的操作习惯。
再看下面的例子：
#[derive(Debug)] struct User { // 自定义一个结构体 name: String, age: i32, } fn print_user(arg: User) { println!(&amp;#34;in:{:?}&amp;#34;, arg); } fn main() { let user1 = User {name: String::from(&amp;#34;zzz&amp;#34;), age: 12}; print_user(user1); println!</description>
    </item>
    
  </channel>
</rss>
